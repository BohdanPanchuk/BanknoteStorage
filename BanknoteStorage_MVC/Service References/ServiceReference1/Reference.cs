//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BanknoteStorage_MVC.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Banknote", Namespace="http://schemas.datacontract.org/2004/07/BanknoteStorage_WcfService")]
    [System.SerializableAttribute()]
    public partial class Banknote : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IBanknoteService")]
    public interface IBanknoteService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetAllBanknotes", ReplyAction="http://tempuri.org/IBanknoteService/GetAllBanknotesResponse")]
        BanknoteStorage_MVC.ServiceReference1.Banknote[] GetAllBanknotes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetAllBanknotes", ReplyAction="http://tempuri.org/IBanknoteService/GetAllBanknotesResponse")]
        System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote[]> GetAllBanknotesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/AddBanknote", ReplyAction="http://tempuri.org/IBanknoteService/AddBanknoteResponse")]
        int AddBanknote(int value, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/AddBanknote", ReplyAction="http://tempuri.org/IBanknoteService/AddBanknoteResponse")]
        System.Threading.Tasks.Task<int> AddBanknoteAsync(int value, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/EditBanknote", ReplyAction="http://tempuri.org/IBanknoteService/EditBanknoteResponse")]
        int EditBanknote(int id, int value, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/EditBanknote", ReplyAction="http://tempuri.org/IBanknoteService/EditBanknoteResponse")]
        System.Threading.Tasks.Task<int> EditBanknoteAsync(int id, int value, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetBanknotesByValue", ReplyAction="http://tempuri.org/IBanknoteService/GetBanknotesByValueResponse")]
        BanknoteStorage_MVC.ServiceReference1.Banknote[] GetBanknotesByValue(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetBanknotesByValue", ReplyAction="http://tempuri.org/IBanknoteService/GetBanknotesByValueResponse")]
        System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote[]> GetBanknotesByValueAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetBanknotesByCount", ReplyAction="http://tempuri.org/IBanknoteService/GetBanknotesByCountResponse")]
        BanknoteStorage_MVC.ServiceReference1.Banknote[] GetBanknotesByCount(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetBanknotesByCount", ReplyAction="http://tempuri.org/IBanknoteService/GetBanknotesByCountResponse")]
        System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote[]> GetBanknotesByCountAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetBanknoteById", ReplyAction="http://tempuri.org/IBanknoteService/GetBanknoteByIdResponse")]
        BanknoteStorage_MVC.ServiceReference1.Banknote GetBanknoteById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/GetBanknoteById", ReplyAction="http://tempuri.org/IBanknoteService/GetBanknoteByIdResponse")]
        System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote> GetBanknoteByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/DeleteBanknote", ReplyAction="http://tempuri.org/IBanknoteService/DeleteBanknoteResponse")]
        void DeleteBanknote(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBanknoteService/DeleteBanknote", ReplyAction="http://tempuri.org/IBanknoteService/DeleteBanknoteResponse")]
        System.Threading.Tasks.Task DeleteBanknoteAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBanknoteServiceChannel : BanknoteStorage_MVC.ServiceReference1.IBanknoteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BanknoteServiceClient : System.ServiceModel.ClientBase<BanknoteStorage_MVC.ServiceReference1.IBanknoteService>, BanknoteStorage_MVC.ServiceReference1.IBanknoteService {
        
        public BanknoteServiceClient() {
        }
        
        public BanknoteServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BanknoteServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanknoteServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BanknoteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BanknoteStorage_MVC.ServiceReference1.Banknote[] GetAllBanknotes() {
            return base.Channel.GetAllBanknotes();
        }
        
        public System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote[]> GetAllBanknotesAsync() {
            return base.Channel.GetAllBanknotesAsync();
        }
        
        public int AddBanknote(int value, int count) {
            return base.Channel.AddBanknote(value, count);
        }
        
        public System.Threading.Tasks.Task<int> AddBanknoteAsync(int value, int count) {
            return base.Channel.AddBanknoteAsync(value, count);
        }
        
        public int EditBanknote(int id, int value, int count) {
            return base.Channel.EditBanknote(id, value, count);
        }
        
        public System.Threading.Tasks.Task<int> EditBanknoteAsync(int id, int value, int count) {
            return base.Channel.EditBanknoteAsync(id, value, count);
        }
        
        public BanknoteStorage_MVC.ServiceReference1.Banknote[] GetBanknotesByValue(int value) {
            return base.Channel.GetBanknotesByValue(value);
        }
        
        public System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote[]> GetBanknotesByValueAsync(int value) {
            return base.Channel.GetBanknotesByValueAsync(value);
        }
        
        public BanknoteStorage_MVC.ServiceReference1.Banknote[] GetBanknotesByCount(int count) {
            return base.Channel.GetBanknotesByCount(count);
        }
        
        public System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote[]> GetBanknotesByCountAsync(int count) {
            return base.Channel.GetBanknotesByCountAsync(count);
        }
        
        public BanknoteStorage_MVC.ServiceReference1.Banknote GetBanknoteById(int id) {
            return base.Channel.GetBanknoteById(id);
        }
        
        public System.Threading.Tasks.Task<BanknoteStorage_MVC.ServiceReference1.Banknote> GetBanknoteByIdAsync(int id) {
            return base.Channel.GetBanknoteByIdAsync(id);
        }
        
        public void DeleteBanknote(int id) {
            base.Channel.DeleteBanknote(id);
        }
        
        public System.Threading.Tasks.Task DeleteBanknoteAsync(int id) {
            return base.Channel.DeleteBanknoteAsync(id);
        }
    }
}
